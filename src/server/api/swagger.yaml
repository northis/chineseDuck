---
swagger: "2.0"
info:
  description: Chinese Duck Bot Api
  version: 1.1.1
  title: Chinese Duck Bot Api
  termsOfService: https://udd3r.com/terms/
  contact:
    email: north@live.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /northis/chineseDuckApi/1.0.0
tags:
- name: word
  description: Dictionary item
- name: user
  description: Operations about user
- name: service
  description: System service operations
- name: folder
  description: User folder for words
schemes:
- https
- http
security:
- OAuth2:
  - read
  - write
  - admin
paths:
  /word:
    post:
      tags:
      - word
      summary: Add a new word to the store
      operationId: addWord
      consumes:
      - application/json
      parameters:
      - in: body
        name: word
        description: Word object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Word'
      responses:
        200:
          description: Updated
        409:
          description: Word object already exists
      security:
      - OAuth2:
        - admin
    put:
      tags:
      - word
      summary: Update an existing word
      operationId: updateWord
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: Word object that needs to be updated in the store
        required: true
        schema:
          $ref: '#/definitions/Word'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Word not found
        405:
          description: Validation error
      security:
      - OAuth2:
        - admin
  /word/import:
    post:
      tags:
      - word
      summary: Imports new words to the store from a csv file
      operationId: importWord
      consumes:
      - text/plain
      parameters:
      - in: body
        name: body
        description: csv file
        required: true
        schema:
          type: string
          format: binary
      responses:
        200:
          description: Uploaded
        409:
          description: Word object already exists
        413:
          description: File too big
      security:
      - OAuth2:
        - write
  /word/folder/{folderId}:
    put:
      tags:
      - word
      - folder
      summary: Move words to another folder
      operationId: moveWordsToFolder
      consumes:
      - application/json
      parameters:
      - name: wordIds
        in: query
        description: Word ids
        required: true
        type: array
        items:
          type: integer
          format: int64
        collectionFormat: multi
      - name: folderId
        in: path
        description: Folder id to move in
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Folder not found
      security:
      - OAuth2:
        - write
  /word/{wordId}/rename:
    put:
      tags:
      - word
      summary: Rename words with another translation
      operationId: renameWord
      parameters:
      - in: body
        name: newTranslation
        description: New translation
        required: true
        schema:
          type: string
      - name: wordId
        in: path
        description: Word id to reaname
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Word not found
      security:
      - OAuth2:
        - write
  /word/{wordId}/score:
    put:
      tags:
      - word
      summary: Update user's score for word
      operationId: scoreWord
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: Score object that needs to be updated in the word
        required: true
        schema:
          $ref: '#/definitions/Score'
      - name: wordId
        in: path
        description: Word id to reaname
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Score updated
        201:
          description: Score created
        400:
          description: Invalid ID supplied
        404:
          description: Word not found
      security:
      - OAuth2:
        - admin
  /word/{wordId}:
    get:
      tags:
      - word
      description: Get word by id
      operationId: getWordId
      produces:
      - application/json
      parameters:
      - name: wordId
        in: path
        description: Word id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Word'
        400:
          description: Invalid ID supplied
        404:
          description: Word is not found
      security:
      - OAuth2:
        - read
    delete:
      tags:
      - word
      summary: Delete word
      operationId: deleteWord
      parameters:
      - name: wordId
        in: path
        description: Word id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        403:
          description: You have no rights to do this
        404:
          description: Word is not found
      security:
      - OAuth2:
        - write
  /folder:
    post:
      tags:
      - folder
      summary: Create folder
      operationId: createFolder
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created folder object
        required: true
        schema:
          $ref: '#/definitions/Folder'
      responses:
        201:
          description: Folder is created
        409:
          description: Folder name already exists
        default:
          description: successful operation
      security:
      - OAuth2:
        - write
  /folder/user/{userId}:
    get:
      tags:
      - folder
      summary: Get folders for user
      operationId: getFoldersForUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: User id
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: User is not found
        default:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
      security:
      - OAuth2:
        - read
  /folder/{folderId}:
    put:
      tags:
      - folder
      summary: Update folder (rename)
      operationId: updateFolder
      consumes:
      - application/json
      parameters:
      - name: folderId
        in: path
        description: The folder id that needs to be deleted.
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: folder with new name
        required: true
        schema:
          $ref: '#/definitions/Folder'
      responses:
        400:
          description: Invalid folder id supplied
        404:
          description: Folder not found
        409:
          description: Folder name already exists
      security:
      - OAuth2:
        - read
    delete:
      tags:
      - folder
      summary: Delete folder
      operationId: deleteFolder
      parameters:
      - name: folderId
        in: path
        description: The folder id that needs to be deleted.
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid folder id supplied
        404:
          description: Folder not found
      security:
      - OAuth2:
        - read
  /user:
    get:
      tags:
      - user
      summary: Get user according to token in header
      operationId: getUserByToken
      produces:
      - application/json
      parameters:
      - name: token
        in: header
        description: user token
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
      security:
      - OAuth2:
        - read
    post:
      tags:
      - user
      summary: Create user
      operationId: createUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
      security:
      - OAuth2:
        - admin
  /user/auth:
    get:
      tags:
      - user
      summary: Send the auth code to user via sms
      operationId: authUser
      produces:
      - application/json
      parameters:
      - name: pnone
        in: query
        description: The user phone for auth
        required: true
        type: string
      responses:
        200:
          description: Auth code sent
        400:
          description: Invalid pnone supplied
        404:
          description: Phone number is not registred
      security:
      - OAuth2:
        - read
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - name: pnone
        in: query
        description: The user phone for auth
        required: true
        type: string
      - name: code
        in: query
        description: The auth code from sms
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid phone/code supplied
        404:
          description: Phone number is not registred
      security:
      - OAuth2:
        - read
  /user/logout:
    get:
      tags:
      - user
      summary: Erase the user token, so user have to recreate it next time
      operationId: logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: the user's token has been erased
      security:
      - OAuth2:
        - read
        - write
  /user/{id}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: getUserById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: The user id that needs to be fetched. Use 0 for testing.
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
      security:
      - OAuth2:
        - admin
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: The user id that needs to be updated.
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
      security:
      - OAuth2:
        - admin
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: The user id that needs to be deleted.
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid user id supplied
        404:
          description: User not found
      security:
      - OAuth2:
        - admin
  /service/datetime:
    get:
      tags:
      - service
      summary: Get system datetime
      operationId: getDatetime
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: current server dt
          schema:
            type: string
            format: date-time
      security:
      - OAuth2:
        - admin
securityDefinitions:
  OAuth2:
    type: oauth2
    authorizationUrl: https://udd3r.com/login
    tokenUrl: https://udd3r.com/token
    flow: accessCode
    scopes:
      read: Grants read access
      write: Grants write access
      admin: Grants read and write access to administrative information
definitions:
  User:
    type: object
    required:
    - id
    - joinDate
    - username
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      tokenHash:
        type: string
      lastCommand:
        type: string
      joinDate:
        type: string
        format: date-time
      mode:
        type: string
    example:
      mode: mode
      joinDate: 2000-01-23T04:56:07.000+00:00
      lastCommand: lastCommand
      id: 6
      tokenHash: tokenHash
      username: username
    xml:
      name: User
  Folder:
    type: object
    required:
    - name
    - owner_id
    properties:
      owner_id:
        type: integer
        format: int64
      name:
        type: string
      owner:
        $ref: '#/definitions/User'
    example:
      owner:
        mode: mode
        joinDate: 2000-01-23T04:56:07.000+00:00
        lastCommand: lastCommand
        id: 6
        tokenHash: tokenHash
        username: username
      owner_id: 0
      name: name
    xml:
      name: Folder
  Score:
    type: object
    required:
    - isInLearnMode
    - lastView
    properties:
      originalWordCount:
        type: integer
        format: int32
      originalWordSuccessCount:
        type: integer
        format: int32
      lastView:
        type: string
        format: datetime
      lastLearned:
        type: string
        format: date-time
      lastLearnMode:
        type: string
      isInLearnMode:
        type: boolean
      rightAnswerNumber:
        type: integer
        format: int32
      pronunciationCount:
        type: integer
        format: int32
      pronunciationSuccessCount:
        type: integer
        format: int32
      translationCount:
        type: integer
        format: int32
      translationSuccessCount:
        type: integer
        format: int32
      viewCount:
        type: integer
        format: int32
      name:
        type: string
    example:
      rightAnswerNumber: 5
      pronunciationSuccessCount: 7
      lastLearnMode: lastLearnMode
      originalWordSuccessCount: 5
      originalWordCount: 1
      translationCount: 9
      isInLearnMode: true
      name: name
      lastLearned: 2000-01-23T04:56:07.000+00:00
      translationSuccessCount: 3
      viewCount: 2
      pronunciationCount: 2
      lastView: lastView
    xml:
      name: Score
  Word:
    type: object
    required:
    - folder_id
    - id
    - originalWord
    - owner_id
    - syllablesCount
    - translation
    properties:
      id:
        type: integer
        format: int64
      owner_id:
        type: integer
        format: int64
      originalWord:
        type: string
        example: 自行车
      pronunciation:
        type: string
        example: zì|xíng|chē
      translation:
        type: string
        example: велосипед
      usage:
        type: string
        example: 我有自行车
      syllablesCount:
        type: integer
        example: 3
      score:
        $ref: '#/definitions/Score'
      folder_id:
        type: integer
        format: int64
    example:
      score:
        rightAnswerNumber: 5
        pronunciationSuccessCount: 7
        lastLearnMode: lastLearnMode
        originalWordSuccessCount: 5
        originalWordCount: 1
        translationCount: 9
        isInLearnMode: true
        name: name
        lastLearned: 2000-01-23T04:56:07.000+00:00
        translationSuccessCount: 3
        viewCount: 2
        pronunciationCount: 2
        lastView: lastView
      pronunciation: zì|xíng|chē
      syllablesCount: 3
      owner_id: 6
      usage: 我有自行车
      translation: велосипед
      id: 0
      originalWord: 自行车
      folder_id: 4
    xml:
      name: Word
  WordFile:
    type: object
    required:
    - bytes
    - createDate
    - fileType
    - id
    - word_id
    properties:
      id:
        type: integer
        format: int64
      word_id:
        type: integer
        format: int64
      createDate:
        type: string
        format: date-time
      bytes:
        type: string
        format: binary
      height:
        type: integer
      width:
        type: integer
      fileType:
        type: string
        enum:
        - audio
        - orig
        - pron
        - trans
        - full
    xml:
      name: WordFile
responses:
  200:
    description: OK
  201:
    description: Created
  400:
    description: Bad request
  401:
    description: Not authenticated
  403:
    description: Access token does not have the required scope
  409:
    description: Conflict
  500:
    description: Server error
