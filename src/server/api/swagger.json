{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://chineseduck.online/api/v1/"
    }
  ],
  "info": {
    "description": "Chinese Duck Bot Api",
    "version": "1.2",
    "title": "Chinese Duck Bot Api",
    "termsOfService": "https://chineseduck.online/terms/",
    "contact": {
      "email": "north@live.ru"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "word",
      "description": "Dictionary item"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "service",
      "description": "System service operations"
    },
    {
      "name": "folder",
      "description": "User folder for words"
    }
  ],
  "paths": {
    "/word": {
      "post": {
        "tags": ["word"],
        "summary": "Add a new word to the store",
        "operationId": "addWord",
        "responses": {
          "200": {
            "description": "Updated"
          },
          "409": {
            "description": "Word object already exists"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Word"
              }
            }
          },
          "description": "Word object that needs to be added to the store",
          "required": true
        }
      },
      "put": {
        "tags": ["word"],
        "summary": "Update an existing word",
        "operationId": "updateWord",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Word not found"
          },
          "405": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Word"
              }
            }
          },
          "description": "Word object that needs to be updated in the store",
          "required": true
        }
      }
    },
    "/word/folder/{folderId}": {
      "put": {
        "tags": ["word", "folder"],
        "summary": "Move words to another folder",
        "operationId": "moveWordsToFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Folder id to move in",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Folder not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "description": "Word ids",
          "required": true
        }
      }
    },
    "/word/folder/{folderId}/count/{count}": {
      "get": {
        "tags": ["word", "folder"],
        "description": "Get words by folder id",
        "operationId": "getWordsFolderId",
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "count",
            "description": "Count limit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Word"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Folder is not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      }
    },
    "/word/folder/{folderId}/user/{userId}/count/{count}": {
      "get": {
        "tags": ["word", "folder", "user"],
        "description": "Get words by folder id & user id",
        "operationId": "getWordsFolderIdUserId",
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "path",
            "name": "count",
            "description": "Count limit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Word"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Folder/user is not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/word/{wordId}/rename": {
      "put": {
        "tags": ["word"],
        "summary": "Rename words with another translation",
        "operationId": "renameWord",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Word not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "wordId",
            "description": "Word id to reaname",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "New translation",
          "required": true
        }
      }
    },
    "/word/{wordId}/score": {
      "put": {
        "tags": ["word"],
        "summary": "Update user's score for word",
        "operationId": "scoreWord",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Word not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "wordId",
            "description": "Word id to reaname",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Score"
              }
            }
          },
          "description": "Score object that needs to be updated in the word",
          "required": true
        }
      }
    },
    "/word/{wordId}": {
      "get": {
        "tags": ["word"],
        "description": "Get word by id",
        "operationId": "getWordId",
        "parameters": [
          {
            "name": "wordId",
            "in": "path",
            "description": "Word id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Word"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Word is not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      },
      "delete": {
        "tags": ["word"],
        "summary": "Delete word",
        "operationId": "deleteWord",
        "parameters": [
          {
            "name": "wordId",
            "in": "path",
            "description": "Word id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "403": {
            "description": "You have no rights to do this"
          },
          "404": {
            "description": "Word is not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      }
    },
    "/word/user/{userId}/search/{wordEntry}": {
      "get": {
        "tags": ["word"],
        "summary": "Get words by word or character for user",
        "description": "Get words by wordEntry for user",
        "operationId": "getWordsByUser",
        "parameters": [
          {
            "name": "wordEntry",
            "in": "path",
            "description": "Word entry",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User entry to match",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Word"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You have no rights to do this"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/word/user/{userId}/nextWord/{mode}": {
      "put": {
        "tags": ["word"],
        "summary": "Set question to study for user and return right answer",
        "description": "Set question to study for user and return right answer",
        "operationId": "setQuestionByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User entry to match",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Learn mode",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NewFirst",
                "OldFirst",
                "NewMostDifficult",
                "OldMostDifficult",
                "Random"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Word"
                }
              }
            }
          },
          "403": {
            "description": "You have no rights to do this"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/word/user/{userId}/answers": {
      "get": {
        "tags": ["word"],
        "summary": "Get answers for current question",
        "description": "Get answers for current question",
        "operationId": "getAnswersByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to match",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Word"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You have no rights to do this"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/word/user/{userId}/currentWord": {
      "get": {
        "tags": ["word"],
        "summary": "Get current learning word for the user",
        "description": "Get current learning word for the user",
        "operationId": "getCurrentWord",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to match",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Word"
                }
              }
            }
          },
          "403": {
            "description": "You have no rights to do this"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/word/file/{fileId}": {
      "get": {
        "tags": ["word"],
        "summary": "Get word's flash card as png binary",
        "operationId": "getWordCard",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Flash card is not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["read"]
          }
        ]
      },
      "delete": {
        "tags": ["word"],
        "summary": "Delete file",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "403": {
            "description": "You have no rights to do this"
          },
          "404": {
            "description": "File is not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/word/file": {
      "post": {
        "tags": ["word"],
        "summary": "Add file",
        "operationId": "addFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WordFileBytes"
              }
            }
          },
          "description": "Word file that needs to be added to the store",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation，fileId",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "You have no rights to do this"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/folder": {
      "post": {
        "tags": ["folder"],
        "summary": "Create folder",
        "operationId": "createFolder",
        "responses": {
          "200": {
            "description": "Folder is created"
          },
          "409": {
            "description": "Folder name already exists"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "description": "Created folder object",
          "required": true
        }
      },
      "get": {
        "tags": ["folder"],
        "summary": "Get folders for current user",
        "operationId": "getFoldersForCurrentUser",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      }
    },
    "/folder/user/{userId}": {
      "get": {
        "tags": ["folder"],
        "summary": "Get folders for user",
        "operationId": "getFoldersForUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User is not found"
          },
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      },
      "post": {
        "tags": ["folder"],
        "summary": "Create folder for specified user",
        "operationId": "createFolderForUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder is created"
          },
          "409": {
            "description": "Folder name already exists"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "description": "Created folder object",
          "required": true
        }
      }
    },
    "/folder/{folderId}": {
      "delete": {
        "tags": ["folder"],
        "summary": "Delete folder",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "The folder id that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Folder not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      },
      "put": {
        "tags": ["folder"],
        "summary": "Update folder (rename)",
        "operationId": "updateFolder",
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "The folder id that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid folder name"
          },
          "404": {
            "description": "Folder not found"
          },
          "409": {
            "description": "Folder name already exists"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "description": "folder with new name",
          "required": true
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "operationId": "createUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object",
          "required": true
        }
      },
      "get": {
        "tags": ["user"],
        "summary": "Get user according to token in header",
        "operationId": "getUserByToken",
        "parameters": [
          {
            "name": "connect.sid",
            "in": "cookie",
            "description": "user token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Invalid auth data"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "in": "query",
            "name": "auth_date",
            "description": "Hash valid until",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "id",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "hash",
            "description": "Hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated. The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests."
          },
          "400": {
            "description": "Invalid phone/code supplied"
          },
          "404": {
            "description": "Phone number is not registred"
          }
        },
        "security": [
          {
            "cookieAuth": ["read"]
          }
        ]
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Erase the user token, so user have to recreate it next time",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "the user's token has been erased"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user id",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id that needs to be fetched. Use 0 for testing.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      },
      "put": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id that needs to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user id supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["admin"]
          }
        ]
      }
    },
    "/user/currentFolder/{folderId}": {
      "put": {
        "tags": ["user", "folder"],
        "summary": "Set current folder for user",
        "description": "This can only be done by the logged in user.",
        "operationId": "setCurrentFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "The user id that needs to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Folder not found"
          }
        },
        "security": [
          {
            "cookieAuth": ["write"]
          }
        ]
      }
    },
    "/service/datetime": {
      "get": {
        "tags": ["service"],
        "summary": "Get system datetime",
        "operationId": "getDatetime",
        "responses": {
          "200": {
            "description": "current server dt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": ["read"]
          }
        ]
      }
    }
  },
  "security": [
    {
      "cookieAuth": ["read", "write", "admin"]
    }
  ],
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": ["_id", "username", "joinDate", "who"],
        "properties": {
          "_id": {
            "type": "integer",
            "format": "int64"
          },
          "currentFolder_id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "lastCommand": {
            "type": "string"
          },
          "joinDate": {
            "type": "string",
            "format": "date-time"
          },
          "who": {
            "type": "string",
            "enum": ["read", "write", "admin"]
          },
          "mode": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Folder": {
        "type": "object",
        "required": ["_id", "name", "owner_id"],
        "properties": {
          "_id": {
            "type": "integer",
            "format": "int64"
          },
          "owner_id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "activityDate": {
            "type": "string",
            "format": "date-time"
          },
          "wordsCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "xml": {
          "name": "Folder"
        }
      },
      "Score": {
        "type": "object",
        "required": ["lastView"],
        "properties": {
          "originalWordCount": {
            "type": "integer",
            "format": "int32"
          },
          "originalWordSuccessCount": {
            "type": "integer",
            "format": "int32"
          },
          "lastView": {
            "type": "string",
            "format": "date-time"
          },
          "lastLearned": {
            "type": "string",
            "format": "date-time"
          },
          "lastLearnMode": {
            "type": "string"
          },
          "rightAnswerNumber": {
            "type": "integer",
            "format": "int16"
          },
          "pronunciationCount": {
            "type": "integer",
            "format": "int32"
          },
          "pronunciationSuccessCount": {
            "type": "integer",
            "format": "int32"
          },
          "translationCount": {
            "type": "integer",
            "format": "int32"
          },
          "translationSuccessCount": {
            "type": "integer",
            "format": "int32"
          },
          "viewCount": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Score"
        }
      },
      "Word": {
        "type": "object",
        "required": [
          "_id",
          "originalWord",
          "translation",
          "syllablesCount",
          "owner_id",
          "folder_id",
          "lastModified"
        ],
        "properties": {
          "_id": {
            "type": "integer",
            "format": "int64"
          },
          "owner_id": {
            "type": "integer",
            "format": "int64"
          },
          "originalWord": {
            "type": "string",
            "example": "自行车"
          },
          "pronunciation": {
            "type": "string",
            "example": "zì|xíng|chē"
          },
          "translation": {
            "type": "string",
            "example": "велосипед"
          },
          "usage": {
            "type": "string",
            "example": "我有自行车"
          },
          "syllablesCount": {
            "type": "integer",
            "example": 3
          },
          "score": {
            "$ref": "#/components/schemas/Score"
          },
          "full": {
            "$ref": "#/components/schemas/WordFile"
          },
          "orig": {
            "$ref": "#/components/schemas/WordFile"
          },
          "pron": {
            "$ref": "#/components/schemas/WordFile"
          },
          "trans": {
            "$ref": "#/components/schemas/WordFile"
          },
          "folder_id": {
            "type": "integer",
            "format": "int64"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "xml": {
          "name": "Word"
        }
      },
      "WordFile": {
        "type": "object",
        "required": ["id", "createDate", "height", "width"],
        "properties": {
          "id": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "height": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          }
        },
        "xml": {
          "name": "WordFile"
        }
      },
      "WordFileBytes": {
        "type": "object",
        "required": ["bytes"],
        "properties": {
          "bytes": {
            "type": "string",
            "format": "byte"
          }
        },
        "xml": {
          "name": "WordFileBytes"
        }
      }
    },
    "responses": {
      "200": {
        "description": "OK"
      },
      "201": {
        "description": "Created"
      },
      "400": {
        "description": "Bad request"
      },
      "401": {
        "description": "Not authenticated"
      },
      "403": {
        "description": "Access token does not have the required scope"
      },
      "409": {
        "description": "Conflict"
      },
      "500": {
        "description": "Server error"
      }
    }
  }
}
